package com.jerry.java.bitwise;

public class BitwiseTest {

    private static void print(int v) {
        System.out.println(String.format("%d (%s) (%d)", v, Integer.toBinaryString(v), Integer.toBinaryString(v).length()));
    }

    public static void main(String[] args) {

        // 1、左移( << )
        // 0000 0000 0000 0000 0000 0000 0000 0101 然后左移2位后，低位补0：//
        // 0000 0000 0000 0000 0000 0000 0001 0100 换算成10进制为20
        System.out.println("1. -------------------------------");
        print(5);
        System.out.println("<<2");
        print(5 << 2);


        System.out.println("\n2. --------------------------------");
        // 2、右移( >> ) 高位补符号位
        // 0000 0000 0000 0000 0000 0000 0000 0101 然后右移2位，高位补0：
        // 0000 0000 0000 0000 0000 0000 0000 0001
        print(5);
        System.out.println(">>2");// 运行结果是1
        print(5 >> 2);

        // 3、无符号右移( >>> ) 高位补0
        // 例如 -5换算成二进制后为：0101 取反加1为1011
        // 1111 1111 1111 1111 1111 1111 1111 1011
        // 我们分别对5进行右移3位、 -5进行右移3位和无符号右移3位：
        System.out.println("\n3. --------------------------------");
        System.out.println("5 >> 3");// 结果是0
        print(5 >> 3);
        System.out.println("-5 >> 3");// 结果是-1
        print(-5 >> 3);
        System.out.println("-5 >>> 3");// 结果是536870911
        print(-5 >>> 3);

        // 4、位与( & )
        // 位与：第一个操作数的的第n位于第二个操作数的第n位如果都是1，那么结果的第n为也为1，否则为0
        System.out.println("\n4. --------------------------------");
        System.out.println("5 & 3");// 结果为1
        print(5 & 3);
        System.out.println("4 & 1");// 结果为0
        print(4 & 1);

        // 5、位或( | )
        // 第一个操作数的的第n位与第二个操作数的第n位 只要有一个是1，那么结果的第n为也为1，否则为0
        System.out.println(5 | 3);// 结果为7

        // 6、位异或( ^ )
        // 第一个操作数的的第n位于第二个操作数的第n位 相反，那么结果的第n为也为1，否则为0
        System.out.println(5 ^ 3);//结果为6

        // 7、位非( ~ )
        // 操作数的第n位为1，那么结果的第n位为0，反之。
        System.out.println(~5);// 结果为-6


        int avalue = -1;
        System.out.println(avalue >> 1);
        System.out.println(avalue >>> 1);
//        结果：
//        -1
//        2147483647
//        1111 1111 1111 1111 1111 1111 1111 1111       -1
//        1111 1111 1111 1111 1111 1111 1111 1111       -1
//        0111 1111 1111 1111 1111 1111 1111 1111       2147483647
    }
}

//1 ：正数 和负数 二进制如何转化？
//        5 的二进制数 转化为－5的二进制数 ，换算方法： 取反＋1.
//        同样  －5 的二进制数 转化为5的二进制数 ，换算方法： 取反＋1.

//2 符号解析：
//        >>>是无符号右移，在高位补零
//        >>是带符号的右移，如果是正数则在高位补零，负数则补1